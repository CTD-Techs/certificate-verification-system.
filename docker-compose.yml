version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cert-verify-backend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-cert_verification}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-10}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      
      # AWS Configuration
      AWS_REGION: ${AWS_REGION}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_TEXTRACT_ENABLED: ${AWS_TEXTRACT_ENABLED:-true}
      AWS_TEXTRACT_MOCK_MODE: ${AWS_TEXTRACT_MOCK_MODE:-false}
      AWS_BEDROCK_ENABLED: ${AWS_BEDROCK_ENABLED:-true}
      AWS_BEDROCK_MOCK_MODE: ${AWS_BEDROCK_MOCK_MODE:-false}
      AWS_BEDROCK_MODEL_ID: ${AWS_BEDROCK_MODEL_ID}
    ports:
      - "8156:3000"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/storage:/app/storage
    networks:
      - cert-verify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:3000}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3000/api/v1}
    container_name: cert-verify-frontend
    restart: unless-stopped
    ports:
      - "5151:80"
    depends_on:
      - backend
    networks:
      - cert-verify-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis (Optional - for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: cert-verify-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - cert-verify-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes

networks:
  cert-verify-network:
    driver: bridge

volumes:
  redis_data:
    driver: local